[tool.poetry]
name = "finbricklab"
version = "0.1.0"
description = "Strategy-Driven Brick Architecture for Financial Scenarios"
authors = ["FinBrickLab Team"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/your-org/finbricklab"
repository = "https://github.com/your-org/finbricklab"
documentation = "https://github.com/your-org/finbricklab#readme"
keywords = ["finance", "modeling", "scenario", "simulation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
]

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^1.24.0"
pandas = "^2.0.0"
plotly = ">=6.1.1"
kaleido = "^1.1.0"

[tool.poetry.extras]
viz = ["plotly", "kaleido"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.5.0"
pre-commit = "^3.4.0"

[tool.poetry.scripts]
finbrick = "finbricklab.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.packages]]
include = "finbricklab"
from = "src"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_unused_ignores = true
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
    "matplotlib.*",
    "plotly.*",
    "kaleido.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_no_return = false
warn_unreachable = false

# Core engine: allow some flexibility for complex scenarios
[[tool.mypy.overrides]]
module = [
    "finbricklab.core.scenario",
    "finbricklab.core.bricks",
    "finbricklab.core.validation",
    "finbricklab.core.utils",
]
disable_error_code = [
    "assignment",     # Some None assignments for initialization
    "attr-defined",   # Dynamic attribute access in strategies
    "union-attr",     # Registry can be None in some contexts
    "var-annotated",  # Some complex variables need runtime inference
    "no-redef",       # Function redefinitions in some cases
    "literal-required", # Dynamic key access in TypedDict
    "typeddict-item", # Missing/extra keys in output construction
    "typeddict-unknown-key", # Dynamic key construction
    "valid-type",     # Some complex type expressions
    "arg-type",       # Some argument type mismatches in complex flows
    "list-item",      # List item type mismatches in collections
]

# CLI: allow more flexibility for user interface
[[tool.mypy.overrides]]
module = [
    "finbricklab.cli",
]
disable_error_code = [
    "assignment",     # CLI argument handling
    "union-attr",     # Registry can be None
    "arg-type",       # Some CLI argument type mismatches
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
